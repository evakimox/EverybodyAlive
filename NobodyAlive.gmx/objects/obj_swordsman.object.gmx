<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_sword_stand</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//properties apply
atk = global.sword_atk;
crit = global.sword_crit;
hp = global.sword_hp;
regen = global.sword_regen;
armor = global.sword_armor;
spd = global.sword_speed * 0.5;

//sprite choices

//general properties
set_image_speed = 0.2;

//walking sprites for three levels
walking_spr = spr_sword_walk;
standing_spr = spr_sword_stand;

//attacking sprites



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
/*if keyboard_check(ord('J')){
    sprite_index = spr_sword_attack;
    myHitBox = instance_create(x,y,obj_meleehitbox);
    myHitBox.image_xscale = image_xscale;
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///movements including collision check with barriers

    x_movement = 1;
    y_movement = 1;


if keyboard_check(ord('A')){
    sprite_index = walking_spr;
    image_xscale = -1;
    image_speed = set_image_speed;
    if(place_meeting(x-spd,y,obj_stonestage1)){
        while(!place_meeting(x-1,y,obj_stonestage1)){
            x = x-1;
        }
        x_movement = -0.2;
    }
    else{
        x_movement = 1;
    }
}
if keyboard_check(ord('D')){
    sprite_index = walking_spr;
    image_xscale = 1;
    image_speed = set_image_speed;
    if(place_meeting(x+spd,y,obj_stonestage1)){
        while(!place_meeting(x-1,y,obj_stonestage1)){
            x = x+1;
        }
        x_movement = -0.2;
    }
    else{
        x_movement = 1;
    }
}
if keyboard_check(ord('S')){
    image_speed = set_image_speed;
    if(place_meeting(x,y+spd,obj_stonestage1)){
        while(!place_meeting(x,y+1,obj_stonestage1)){
            y = y+1;
        }
        y_movement = -0.2;
    }
    else{
        y_movement = 1;
    }
}
if keyboard_check(ord('W')){
    image_speed = set_image_speed;
    if(place_meeting(x,y-spd,obj_stonestage1)){
        while(!place_meeting(x,y-1,obj_stonestage1)){
            y = y-1;
        }
        y_movement = -0.2;
    }
    else{
        y_movement = 1;
    }
}
else if keyboard_check(vk_nokey){
    sprite_index = standing_spr;
}
    

//double key:
if (keyboard_check(ord('W'))&amp;&amp;keyboard_check(ord('A'))){
    y = y-(spd*1.414/2)*y_movement;
    x = x-(spd*1.414/2)*x_movement;
}
else if (keyboard_check(ord('W'))&amp;&amp;keyboard_check(ord('D'))){
    y = y-(spd*1.414/2)*y_movement;
    x = x+(spd*1.414/2)*x_movement;
}
else if (keyboard_check(ord('S'))&amp;&amp;keyboard_check(ord('A'))){
    y = y+(spd*1.414/2)*y_movement;
    x = x-(spd*1.414/2)*x_movement;
}
else if (keyboard_check(ord('S'))&amp;&amp;keyboard_check(ord('D'))){
    y = y+(spd*1.414/2)*y_movement;
    x = x+(spd*1.414/2)*x_movement;
}


//single key:
else if keyboard_check(ord('W')){
    y = y-spd*y_movement;
}
else if keyboard_check(ord('S')){
    y = y+spd*y_movement;
}
else if keyboard_check(ord('A')){
    x = x-spd*x_movement;
}
else if keyboard_check(ord('D')){
    x = x+spd*x_movement;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///attack with a debounce using alarm
/*
if(alarm[0] ==-1){
    //
    alarm = 15;
}
*/

if keyboard_check_pressed(ord('J')){
    sprite_index = spr_sword_attack;
    myHitBox = instance_create(x,y,obj_meleehitbox);
    myHitBox.image_xscale = image_xscale;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///death transform to next room

if(hp&lt;=0){   
    sprite_index = spr_die;
    image_speed = 50;
    image_alpha -=0.02;
    y-=2;
    if(image_alpha&lt;=0.05){
        instance_create(0,0,obj_dedTell);
        instance_destroy();   
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
draw_set_color(c_white);
draw_set_font(ComicSansMS);
hpValue = string(hp);
hpMax = string(global.sword_hp);
draw_text_transformed(800,50,"hp: "+hpValue+"/"+hpMax,0.6,0.6,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
